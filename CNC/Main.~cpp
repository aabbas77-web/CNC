//---------------------------------------------------------------------------

#include <vcl.h>
#include <math.hpp>
#include <inifiles.hpp>
#pragma hdrstop

#include "Main.h"
#include "api_VecApi.h"
#include "quilt_Messages.h"
#include "About.h"
#include "Simulator.h"
#include "Options.h"
#include "Export.h"
#include "Properties.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma link "FormTranslation"
#pragma link "CSPIN"
#pragma resource "*.dfm"
TFormMain *FormMain;
//---------------------------------------------------------------------------
__fastcall TFormMain::TFormMain(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::FindPlugins(TStringList *pFiles)
{
 	TSearchRec SR;
 	int iAttributes = 0;
    AnsiString strPath = IncludeTrailingBackslash(ExtractFilePath(Application->ExeName))+"Plugins\\";
	ForceDirectories(strPath);    
 	iAttributes |= faArchive | faAnyFile;
    pFiles->Clear();
 	if(FindFirst(strPath+"*.dll",iAttributes,SR)==0)
  	{
   		do
    	{
     		if((SR.Attr & iAttributes) == SR.Attr)
      			pFiles->AddObject(IncludeTrailingBackslash(strPath)+SR.Name,NULL);
    	}
        while(FindNext(SR) == 0);
   		FindClose(SR);
  	}
}    
//---------------------------------------------------------------------------
void __fastcall TFormMain::DoClickPlugin(TObject *Sender)
{
	if(Sender == NULL)	return;
    nCurrPluginIndex = (dynamic_cast<TMenuItem *>(Sender))->Tag;
    TPlugin *pPlugin;
    pPlugin = (TPlugin *)pPlugins->Objects[nCurrPluginIndex];
    if(pPlugin == NULL)	return;
    if(pPlugin->ShowModalInterface() != mrOk)	return;
    vlExecute(spl_CMD_PLUG_IN);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::ClearPlugins()
{
    TPlugin *pPlugin;
    for(int i=0;i<pPlugins->Count;i++)
    {
     	pPlugin = (TPlugin *)pPlugins->Objects[i];
        if(pPlugin)
        {
         	delete pPlugin;
            pPlugin = NULL;
        }
    }
    pPlugins->Clear();
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::UpdatePlugins()
{
	ClearPlugins();
    FindPlugins(pPlugins);

    TPlugin *pPlugin;
    TMenuItem *pItem;
    TMenuItem *pGroupItem;
    AnsiString strGroupName;
    bool bGroupFound;
    Plugin1->Visible = (pPlugins->Count > 0);
    Plugin1->Clear();
    for(int i=0;i<pPlugins->Count;i++)
    {
    	pItem = new TMenuItem(this);

        pPlugin = new TPlugin();
		pPlugin->LoadFromFile(pPlugins->Strings[i]);
        pPlugin->GetIcon(pItem->Bitmap);
		pPlugin->Initialize(vlRedraw,vlDrawLine,vlDrawPolyline,vlDrawPolygon,
                vlDrawCircle,vlDrawArc,vlDrawEllipse,vlDrawText,
                vlAddLine,vlAddCircle,vlAddCircle3P,vlAddArc,
                vlAddArc3P,vlAddEllipse,vlAddArcEx,vlSetTextParam,
                vlSetTextParams,vlAddText,vlPolylineBegin,vlVertex,
                vlVertexR,vlVertexF,vlVertexB,vlAddPolyline,vlAddRect);

        pPlugins->Objects[i] = (TObject *)pPlugin;

        pItem->Caption = pPlugin->GetName()+AnsiString(" - V")+pPlugin->GetVersion();
        pItem->Hint = pPlugin->GetHint();
        pItem->ShortCut = pPlugin->GetShortCut();
//        pPlugin->GetAuthorName();
//        pPlugin->GetDate();
        pItem->OnClick = DoClickPlugin;
        pItem->Tag = i;

        strGroupName = pPlugin->GetGroup();
        bGroupFound = false;
        for(int j=0;j<Plugin1->Count;j++)
        {
			if(Plugin1->Items[j]->Caption == strGroupName)
            {
            	pGroupItem = Plugin1->Items[j];
            	bGroupFound = true;
             	break;
            }
        }
        if(bGroupFound)
        {
	    	pGroupItem->Add(pItem);
        }
        else
        {
	    	pGroupItem = new TMenuItem(this);
            pGroupItem->Caption = strGroupName;
	    	Plugin1->Add(pGroupItem);
	    	pGroupItem->Add(pItem);
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::LoadSettings()
{
    TIniFile *pIniFile = new TIniFile(ChangeFileExt(Application->ExeName,".ini"));

    // Language
    m_nLanguageID = pIniFile->ReadInteger("Language","ID",0);
    m_dWorkingAreaWidthCM = pIniFile->ReadFloat("Settings","WorkingAreaWidthCM",100.0);
    m_dWorkingAreaHeightCM = pIniFile->ReadFloat("Settings","WorkingAreaHeightCM",100.0);
    m_dMinStepCM = pIniFile->ReadFloat("Settings","MinStepCM",0.01);

    // Grid
    m_dGridOX = pIniFile->ReadFloat("Grid","dGridOX",0.0);
    m_dGridOY = pIniFile->ReadFloat("Grid","dGridOY",0.0);
    m_dGridSmallStepX = pIniFile->ReadFloat("Grid","dGridSmallStepX",0.1);
    m_dGridSmallStepY = pIniFile->ReadFloat("Grid","dGridSmallStepY",0.1);
    m_nGridLargeStepX = pIniFile->ReadInteger("Grid","nGridLargeStepX",10);
    m_nGridLargeStepY = pIniFile->ReadInteger("Grid","nGridLargeStepY",10);
    m_bGridSnap = pIniFile->ReadBool("Grid","bGridSnap",true);
    m_bGridShow = pIniFile->ReadBool("Grid","bGridShow",true);
    m_nGridSmallColor = pIniFile->ReadInteger("Grid","nGridSmallColor",clBlue);
    m_nGridLargeColor = pIniFile->ReadInteger("Grid","nGridLargeColor",TColor(0x00FFC0C0));

	// Tools
    for(int i=0;i<10;i++)
    {
        g_pTools[i].x0 = pIniFile->ReadFloat("Tools",FormatFloat("dTool0_X",i),0.0);
        g_pTools[i].y0 = pIniFile->ReadFloat("Tools",FormatFloat("dTool0_Y",i),0.0);
        g_pTools[i].nColor = (TColor)pIniFile->ReadInteger("Tools",FormatFloat("nTool0_Color",i),g_pDefaultToolsColors[i]); 
        g_pTools[i].strName = pIniFile->ReadString("Tools",FormatFloat("strTool0_Name",i),""); 
    }

    if(pIniFile)	delete pIniFile;
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::SaveSettings()
{
    TIniFile *pIniFile = new TIniFile(ChangeFileExt(Application->ExeName,".ini"));

    // Language
    pIniFile->WriteInteger("Language","ID",m_nLanguageID);

    pIniFile->WriteFloat("Settings","WorkingAreaWidthCM",m_dWorkingAreaWidthCM);
    pIniFile->WriteFloat("Settings","WorkingAreaHeightCM",m_dWorkingAreaHeightCM);
    pIniFile->WriteFloat("Settings","MinStepCM",m_dMinStepCM);

    // Grid
    pIniFile->WriteFloat("Grid","dGridOX",m_dGridOX);
    pIniFile->WriteFloat("Grid","dGridOY",m_dGridOY);
    pIniFile->WriteFloat("Grid","dGridSmallStepX",m_dGridSmallStepX);
    pIniFile->WriteFloat("Grid","dGridSmallStepY",m_dGridSmallStepY);
    pIniFile->WriteInteger("Grid","nGridLargeStepX",m_nGridLargeStepX);
    pIniFile->WriteInteger("Grid","nGridLargeStepY",m_nGridLargeStepY);
    pIniFile->WriteBool("Grid","bGridSnap",m_bGridSnap);
    pIniFile->WriteBool("Grid","bGridShow",m_bGridShow);
    pIniFile->WriteInteger("Grid","nGridSmallColor",m_nGridSmallColor);
    pIniFile->WriteInteger("Grid","nGridLargeColor",m_nGridLargeColor);

	// Tools
    for(int i=0;i<10;i++)
    {
        pIniFile->WriteFloat("Tools",FormatFloat("dTool0_X",i),g_pTools[i].x0);
        pIniFile->WriteFloat("Tools",FormatFloat("dTool0_Y",i),g_pTools[i].y0);
        pIniFile->WriteInteger("Tools",FormatFloat("nTool0_Color",i),g_pTools[i].nColor);
        pIniFile->WriteString("Tools",FormatFloat("strTool0_Name",i),g_pTools[i].strName); 
    }

    if(pIniFile)	delete pIniFile;
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::BuildEntitiesList()
{
	ListBoxEntities->Clear();
    CSpinEditDepth->Value = 0;
    CSpinEditDepth->Enabled = false;
    ComboBoxTools->Enabled = false;
	if(!g_bGenerateNamesList)	return;
    if(TheEnd) return;
    ql_Layers Layers;
    ExtractLayers(Layers);

    int nLayersCount;
    int nEntitiesCount;
    int nEntityType;
    int nPointsCount;
    int nEntityIndex;

    nLayersCount=Layers.size();
    for(int nLayerIndex=0;nLayerIndex<nLayersCount;nLayerIndex++)
    {
        nEntitiesCount=Layers[nLayerIndex].size();
        if(nEntitiesCount<=0)    continue;
        for(int k=0;k<nEntitiesCount;k++)
        {
            nEntityIndex = Layers[nLayerIndex][k];
            if(nEntityIndex == m_nWorkingAreaRectIndex)	continue;
            nEntityType = vlPropGetInt(VD_ENT_TYPE,nEntityIndex);
            AnsiString strEntityName = FormatFloat("Unknown00000",nEntityIndex);
        	switch(nEntityType)
            {
             	case VL_ENT_POINT:
                {
                	strEntityName = FormatFloat("Point00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_LINE:
                {
                	strEntityName = FormatFloat("Line00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_POLY:
                {
                	strEntityName = FormatFloat("Polyline00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_CIRCLE:
                {
                	strEntityName = FormatFloat("Circle00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_ARC:
                {
                	strEntityName = FormatFloat("Arc00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_ARC2:
                {
                	strEntityName = FormatFloat("Arc200000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_ELLIPSE:
                {
                	strEntityName = FormatFloat("Ellipse00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_TEXT:
                {
                	strEntityName = FormatFloat("Text00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_BITMAP:
                {
                	strEntityName = FormatFloat("Bitmap00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_INSBLOCK:
                {
                	strEntityName = FormatFloat("Block00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_HATCH:
                {
                	strEntityName = FormatFloat("Hatch00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_FLOOD:
                {
                	strEntityName = FormatFloat("Flood00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_RECT:
                {
                	strEntityName = FormatFloat("Rect00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_DIMLIN:
                {
                	strEntityName = FormatFloat("DimLin00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_DIMANG:
                {
                	strEntityName = FormatFloat("DimAng00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_DIMRAD:
                {
                	strEntityName = FormatFloat("DimRad00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_DIMDIAM:
                {
                	strEntityName = FormatFloat("DimDiam00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_DIMORD:
                {
                	strEntityName = FormatFloat("DimOrd00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_INSDWG:
                {
                	strEntityName = FormatFloat("InsDwg00000",nEntityIndex);
                 	break;
                }
             	case VL_ENT_CUSTOM:
                {
                	strEntityName = FormatFloat("Custom00000",nEntityIndex);
                 	break;
                }
            }
            ListBoxEntities->Items->AddObject(strEntityName,(TObject *)nEntityIndex);
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::Extract_Template()
{
	ListBoxEntities->Clear();

    if(TheEnd) return;
    ql_Layers Layers;
    ExtractLayers(Layers);

    int LayersCount;
    int EntitiesCount;
    int EntityType;
    AnsiString LayerName;
    int PointsCount;
    double x,y;
    int EntColor;
    int LayerIndex;
    double Param;
    int EntityIndex;

    LayersCount=Layers.size();
    for(int LayerIndex=0;LayerIndex<LayersCount;LayerIndex++)
    {
        EntitiesCount=Layers[LayerIndex].size();
        if(EntitiesCount<=0)    continue;

        for(int k=0;k<EntitiesCount;k++)
        {
            EntityIndex = Layers[LayerIndex][k];
            EntityType = vlPropGetInt(VD_ENT_TYPE,EntityIndex);
            switch(EntityType)
            {
                case VL_ENT_POINT:// Point
                {
                    break;
                }
                case VL_ENT_LINE:// Line
                {
                    break;
                }
                case VL_ENT_POLYLINE:// Polyline
                {
                    break;
                }
                case VL_ENT_CIRCLE	:// Circle
                {
                    break;
                }
                case VL_ENT_ARC		:// Arc
                {
                    break;
                }
                case VL_ENT_ARC2	:// Arc2
                {
                    break;
                }
                case VL_ENT_ELLIPSE	:// Ellipse
                {
                    break;
                }
                case VL_ENT_TEXT:// Text
                {
                    break;
                }
                case VL_ENT_BITMAP:// Bitmap
                {
                    break;
                }
                case VL_ENT_INSBLOCK:// Block insertion
                {
                    break;
                }
                case VL_ENT_HATCH:// Hatch
                {
                    break;
                }
                case VL_ENT_FLOOD:// Flood
                {
                    break;
                }
                case VL_ENT_RECT:// Rectangle
                {
                    break;
                }
                case VL_ENT_DIMLIN:// DIMLIN
                {
                    break;
                }
                case VL_ENT_DIMANG	:// DIMANG
                {
                    break;
                }
                case VL_ENT_DIMRAD	:// DIMRAD
                {
                    break;
                }
                case VL_ENT_DIMDIAM	:// DIMDIAM
                {
                    break;
                }
                case VL_ENT_DIMORD	:// DIMORD
                {
                    break;
                }
                case VL_ENT_DWGINS	:// DWGINS
                {
                    break;
                }
                case VL_ENT_CUSTOM	:// CUSTOM
                {
                    break;
                }
            }
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::NewDocument(AnsiString strFileName)
{
    g_bGenerateNamesList = true;
    if(TheEnd) return;

    int nDocIndex = vlFileNew(ghwVec,"");
    vlPropPut(VD_DWG_FILENAME,nDocIndex,strFileName.c_str());
    ListBoxOpenedFiles->Items->AddObject(ExtractFileName(strFileName),(TObject *)nDocIndex);

	// Clear and create default informational objects
    vlClear(true);

    // Units
    vlPropPutDbl(VD_UNITS_LIN,-1,VL_UNIT_CM);// -1 mean currenly active drawing.

    // Grid
    vlPropPutDbl(VD_GRID_X0,-1,m_dGridOX);
    vlPropPutDbl(VD_GRID_Y0,-1,m_dGridOY);
    vlPropPutDbl(VD_GRID_DX,-1,m_dGridSmallStepX);
    vlPropPutDbl(VD_GRID_DY,-1,m_dGridSmallStepY);
    vlPropPutInt(VD_GRID_BSTEPX,-1,m_nGridLargeStepX);
    vlPropPutInt(VD_GRID_BSTEPY,-1,m_nGridLargeStepY);
    nSnapData = vlPropGetInt(VD_DWG_SNAP,-1);
    if(m_bGridSnap && (!(nSnapData & VL_SNAP_GRID))) 	vlExecute(VC_SNAP_GRID);
    else
    if((!m_bGridSnap) && (nSnapData & VL_SNAP_GRID))	vlExecute(VC_SNAP_GRID);
    vlPropPutInt(VD_DWG_SHOWGRID,-1,m_bGridShow);
    vlPropPutInt(VD_GRID_COLOR,-1,m_nGridSmallColor);
    vlPropPutInt(VD_GRID_BCOLOR,-1,m_nGridLargeColor);

    vlPropPutDbl(VD_EXP_X0,nDocIndex,0);
    vlPropPutDbl(VD_EXP_Y0,nDocIndex,0);
    vlPropPutInt(VD_EXP_UNITX,nDocIndex,1);
    vlPropPutInt(VD_EXP_UNITY,nDocIndex,1);
    vlPropPutDbl(VD_EXP_MINSTEP,nDocIndex,m_dMinStepCM);// device

    // Working Area
    m_nWorkingAreaRectIndex = vlAddRect(m_dWorkingAreaWidthCM/2.0, m_dWorkingAreaHeightCM/2.0, m_dWorkingAreaWidthCM, m_dWorkingAreaHeightCM, 0, 0);
    vlPropPutInt(VD_ENT_COLOR,m_nWorkingAreaRectIndex,clGreen);
    vlPropPutInt(VD_ENT_KEY,m_nWorkingAreaRectIndex,-2);// Frame Key

	ActivateEntity(-1);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::OpenDATFile(AnsiString strFileName)
{
    if(!ql_LoadQuiltingFile(strFileName,QuiltingFile))	return;
    DrawQuiltingFile(strFileName);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::DrawQuiltingFile(AnsiString strFileName)
{
    Caption = m_strAppTitle+" ["+strFileName+"]";
	NewDocument(strFileName);

    ql_Stitch QuiltingStitch;
    int nObjIndex;
	for(UINT i=0;i<QuiltingFile.size();i++)
    {
		QuiltingStitch = QuiltingFile[i];
        switch(QuiltingStitch.Type)
        {
         	case stEof:// End Of File
            {
             	break;
            }
         	case stContinousLine:// Continous Line
            {
				nObjIndex = vlAddLine(QuiltingStitch.Start.x,QuiltingStitch.Start.y,QuiltingStitch.End.x,QuiltingStitch.End.y);
                vlPropPutInt(VD_ENT_COLOR,nObjIndex,clBlack);
                vlPropPutInt(VD_ENT_KEY,nObjIndex,QuiltingStitch.Speed);
             	break;
            }
         	case stContinousArc:// Continous Arc
            {
                double Radius;
                ql_Point Start,End,Center;
                double AngS,AngE;

                if(!QuiltingStitch.Direction)
                {
	                Start = QuiltingStitch.Start;
	                End = QuiltingStitch.End;
                }
                else
				{
	                Start = QuiltingStitch.End;
	                End = QuiltingStitch.Start;
				}
				Center = QuiltingStitch.Center;
				Radius = sqrt((Start.x-Center.x)*(Start.x-Center.x)+(Start.y-Center.y)*(Start.y-Center.y));

                if(Start.x - Center.x != 0.0)
	                AngS = RadToDeg(ArcTan2(Start.y - Center.y,Start.x - Center.x));
                else
                {
					if(Start.y - Center.y >= 0.0)
		                AngS = +90.0;
                    else
		                AngS = -90.0;
                }

                if(End.x - Center.x != 0.0)
	                AngE = RadToDeg(ArcTan2(End.y - Center.y,End.x - Center.x));
                else
                {
					if(End.y - Center.y >= 0.0)
		                AngE = +90.0;
                    else
		                AngE = -90.0;
                }

                nObjIndex = vlAddArc(Center.x, Center.y, Radius, AngS, AngE);

                vlPropPutInt(VD_ENT_COLOR,nObjIndex,clBlack);
                vlPropPutInt(VD_ENT_KEY,nObjIndex,QuiltingStitch.Speed);
             	break;
            }
         	case stDiscreteLine:// Discrete Line
            {
				nObjIndex = vlAddLine(QuiltingStitch.Start.x,QuiltingStitch.Start.y,QuiltingStitch.End.x,QuiltingStitch.End.y);
                vlPropPutInt(VD_ENT_COLOR,nObjIndex,0x00FF8000);
                vlPropPutInt(VD_ENT_KEY,nObjIndex,QuiltingStitch.Speed);
             	break;
            }
        }
    }

    // Show All
    vlZoom(VL_ZOOM_ALL);
    vlZoom(0.9);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::ExtractLayers(ql_Layers &Layers)
{
    Layers.clear();
    if(TheEnd) return;

    int LayersCount;
    int EntitiesCount;
    int DocIndex;
    int LayerIndex;
    bool EntityVisible;
    bool EntityDeleted;
    int LayerEntitiesCount;
    bool LayerVisible;
    bool LayerPrint;

    LayersCount=vlLayerCount();
    if(LayersCount <= 0)	return;
    Layers.resize(LayersCount);

    DocIndex=vlDocGetActive();
    EntitiesCount=vlPropGetInt(VD_DWG_N_ENT,DocIndex);
    for(int EntityIndex=0;EntityIndex<EntitiesCount;EntityIndex++)
    {
        LayerIndex=vlPropGetInt(VD_ENT_LAYER,EntityIndex);
        LayerVisible=vlPropGetInt(VD_LAYER_VISIBLE,LayerIndex);
        LayerPrint=!vlPropGetInt(VD_LAYER_NOPRINT,LayerIndex);
        LayerEntitiesCount=vlPropGetInt(VD_LAYER_N_REF,LayerIndex);
        if((LayerEntitiesCount>0) && LayerVisible && LayerPrint)
        {
            EntityVisible=vlPropGetInt(VD_ENT_ONSCREEN,EntityIndex);
            EntityDeleted=vlPropGetInt(VD_ENT_DELETED,EntityIndex);
            if(EntityVisible && (!EntityDeleted))
                Layers[LayerIndex].push_back(EntityIndex);
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::SaveDATFile(AnsiString strFileName)
{
    if(TheEnd) return;
    ql_Layers Layers;
    ExtractLayers(Layers);

    int LayersCount;
    int EntitiesCount;
    int EntityType;
    AnsiString LayerName;
    int PointsCount;
    double x,y;
    int EntColor;
    int LayerIndex;
    double Param;
    int EntityIndex;
    int EntitySpeed;
    ql_Stitch QuiltingStitch;
    ql_Point Center,ElRadius,Start,End;
    double Radius;

    // Start Export
    QuiltingFile.clear();
    LayersCount=Layers.size();
    for(int LayerIndex=0;LayerIndex<LayersCount;LayerIndex++)
    {
        EntitiesCount=Layers[LayerIndex].size();
        if(EntitiesCount<=0)    continue;

        for(int k=0;k<EntitiesCount;k++)
        {
            EntityIndex = Layers[LayerIndex][k];
            EntityType = vlPropGetInt(VD_ENT_TYPE,EntityIndex);
            EntitySpeed = vlPropGetInt(VD_ENT_KEY,EntityIndex);
            switch(EntityType)
            {
                case VL_ENT_POLYLINE:// Polyline
                {
                    EntColor = vlPropGetInt(VD_ENT_COLOR,EntityIndex);
                    if(EntColor != 0x00FF8000)
	                    QuiltingStitch.Type = stContinousLine;
                    else
	                    QuiltingStitch.Type = stDiscreteLine;

                    PointsCount = vlPropGetInt(VD_POLY_N_VER,EntityIndex);

                    vlPolyVerGet(EntityIndex,0,&x,&y,&Param);
                    QuiltingStitch.Start = qlPoint(x,y);
                    QuiltingStitch.Center = qlPoint(0,0);
                    for(int PointIndex=1;PointIndex<PointsCount;PointIndex++)
                    {
                        vlPolyVerGet(EntityIndex,PointIndex,&x,&y,&Param);
                        QuiltingStitch.End = qlPoint(x,y);
                        QuiltingStitch.Direction = 0;
                        QuiltingStitch.Speed = EntitySpeed;
                        QuiltingFile.push_back(QuiltingStitch);

                    	QuiltingStitch.Start = QuiltingStitch.End;
                    }
                    break;
                }
                case VL_ENT_LINE:// Line
                {
                    EntColor = vlPropGetInt(VD_ENT_COLOR,EntityIndex);
                    if(EntColor != 0x00FF8000)
	                    QuiltingStitch.Type = stContinousLine;
                    else
	                    QuiltingStitch.Type = stDiscreteLine;

                    x = vlPropGetDbl(VD_LINE_X1,EntityIndex);
                    y = vlPropGetDbl(VD_LINE_Y1,EntityIndex);
                    QuiltingStitch.Start = qlPoint(x,y);

                    x = vlPropGetDbl(VD_LINE_X2,EntityIndex);
                    y = vlPropGetDbl(VD_LINE_Y2,EntityIndex);
                    QuiltingStitch.End = qlPoint(x,y);

                    QuiltingStitch.Center = qlPoint(0,0);
                    QuiltingStitch.Direction = 0;
                    QuiltingStitch.Speed = EntitySpeed;

                    QuiltingFile.push_back(QuiltingStitch);
                    QuiltingStitch.Start = QuiltingStitch.End;
                    break;
                }
                case VL_ENT_ARC		:// Arc
                case VL_ENT_ARC2	:// Arc
                {
                    QuiltingStitch.Type = stContinousArc;

                    x = vlPropGetDbl(VD_ARC_XS,EntityIndex);
                    y = vlPropGetDbl(VD_ARC_YS,EntityIndex);
                    QuiltingStitch.Start = qlPoint(x,y);

                    x = vlPropGetDbl(VD_ARC_XE,EntityIndex);
                    y = vlPropGetDbl(VD_ARC_YE,EntityIndex);
                    QuiltingStitch.End = qlPoint(x,y);

                    x = vlPropGetDbl(VD_ARC_X,EntityIndex);
                    y = vlPropGetDbl(VD_ARC_Y,EntityIndex);
                    QuiltingStitch.Center = qlPoint(x,y);

                    x = vlPropGetDbl(VD_ARC_ANGARC,EntityIndex);
                    QuiltingStitch.Direction = (x>=0)?0:1;

                    QuiltingStitch.Speed = EntitySpeed;

                    QuiltingFile.push_back(QuiltingStitch);
                    QuiltingStitch.Start = QuiltingStitch.End;
                    break;
                }
                case VL_ENT_CIRCLE	:// Circle
                {
                	Center.x = vlPropGetDbl(VD_CIRCLE_X,EntityIndex);
                	Center.y = vlPropGetDbl(VD_CIRCLE_Y,EntityIndex);
                	Radius = vlPropGetDbl(VD_CIRCLE_R,EntityIndex);

                    Start.x = Center.x + Radius * cos(DegToRad(0));
                    Start.y = Center.y + Radius * sin(DegToRad(0));

                    End.x = Center.x + Radius * cos(DegToRad(360));
                    End.y = Center.y + Radius * sin(DegToRad(360));

                    QuiltingStitch.Type = stContinousArc;

                    QuiltingStitch.Start = Start;
                    QuiltingStitch.End = End;
                    QuiltingStitch.Center = Center;
                    QuiltingStitch.Direction = 1;

                    QuiltingStitch.Speed = EntitySpeed;

                    QuiltingFile.push_back(QuiltingStitch);
                    QuiltingStitch.Start = QuiltingStitch.End;
                    break;
                }
                case VL_ENT_ELLIPSE	:// Ellipse
                {
                	Center.x = vlPropGetDbl(VD_ELLIPSE_X,EntityIndex);
                	Center.y = vlPropGetDbl(VD_ELLIPSE_Y,EntityIndex);
                	ElRadius.x = vlPropGetDbl(VD_ELLIPSE_RH,EntityIndex);
                	ElRadius.y = vlPropGetDbl(VD_ELLIPSE_RV,EntityIndex);

                    Start.x = Center.x + ElRadius.x * cos(DegToRad(0));
                    Start.y = Center.y + ElRadius.y * sin(DegToRad(0));

                    End.x = Center.x + ElRadius.x * cos(DegToRad(360));
                    End.y = Center.y + ElRadius.y * sin(DegToRad(360));

                    QuiltingStitch.Type = stContinousArc;

                    QuiltingStitch.Start = Start;
                    QuiltingStitch.End = End;
                    QuiltingStitch.Center = Center;
                    QuiltingStitch.Direction = 1;

                    QuiltingStitch.Speed = EntitySpeed;

                    QuiltingFile.push_back(QuiltingStitch);
                    QuiltingStitch.Start = QuiltingStitch.End;
                    break;
                }
            }
        }
    }
	ql_SaveQuiltingFileAsDAT(strFileName,QuiltingFile);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::FormCreate(TObject *Sender)
{
	Left = 0;
    Top = 0;
    Width = Screen->Width;
    Height = Screen->Height - 30;

    m_pCanvas = new TCanvas();

    m_strAppTitle = Caption;

    m_nImageIndex = -1;

    TheEnd = false;

    // Register your copy of Vecad.dll
    vlRegistration(ALISOFT_REG_CODE_5_2);

    // Set message handler function
    vlSetMsgHandler(DwgProc);

    // Create VeCAD StatusBar
    vlStatBarCreate( PanelDisplay->Handle, &SBarH );

    // Create VeCAD window, size will be set in OnSize()
    ghwVec = vlWndCreate( PanelDisplay->Handle, VL_WS_CHILD|VL_WS_SCROLL|VL_WS_BORDER, 0,0,400,300 );
    if(ghwVec)
    {
        ::PostMessage( PanelDisplay->Handle, WM_SIZE, 0, 0 );
        vlPropPut( VD_WND_EMPTYTEXT, (int)ghwVec,(c_strCompany+" "+m_strAppTitle).c_str());
    }

    m_strFileName="Untitled";
    Caption=m_strAppTitle;
    g_bGenerateNamesList = true;
    LoadSettings();

    pPlugins = new TStringList();
	UpdatePlugins();
    nCurrPluginIndex = 0;

	ActivateEntity(-1);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::FormDestroy(TObject *Sender)
{
	SaveSettings();
    ClearPlugins();
    if(pPlugins)	delete pPlugins;pPlugins = NULL;
	if(m_pCanvas)
    {
     	delete m_pCanvas;
        m_pCanvas = NULL;
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::PanelDisplayResize(TObject *Sender)
{
    if(TheEnd) return;

    int w, h;
    vlGetWinSize( PanelDisplay->Handle, &w, &h );
    if(w>0 && h>0)
    {
        // Resize drawing window
      	vlWndResize( ghwVec, 0, 0, w, h - SBarH );

        // Resize statusbar
        vlStatBarResize();

        // Update View
	    vlZoom(VL_ZOOM_ALL);
    	vlZoom(0.9);
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AFileNewExecute(TObject *Sender)
{
	NewDocument(c_strUntitledFile);

    // Clear entity list
    FormMain->ListBoxEntities->Clear();

    // Show All
    vlZoom(VL_ZOOM_ALL);
    vlZoom(0.9);

    Caption = m_strAppTitle+" ["+c_strUntitledFile+"]";
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileChangeDimExecute(TObject *Sender)
{
/*
	if(FormNew->ShowModal() != mrOk)	return;
    int nWidth,nHeight;
    nWidth = StrToInt(FormNew->EditWidth->Text)*100;
    nHeight = StrToInt(FormNew->EditHeight->Text)*100;

    // Show All
    vlZoom(VL_ZOOM_ALL);
    vlZoom(0.9);
*/    
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileOpenExecute(TObject *Sender)
{
	if(OpenDialogVEC->Execute())
    {
	    g_bGenerateNamesList = false;
        vlFileOpen(ghwVec,OpenDialogVEC->FileName.c_str());
		ActivateEntity(-1);
        m_nWorkingAreaRectIndex = vlGetEntity(VL_EI_BYKEY,-2,VL_DRAWING);
	    int nDocIndex = vlDocGetActive();
    	ListBoxOpenedFiles->Items->AddObject(ExtractFileName(OpenDialogVEC->FileName),(TObject *)nDocIndex);
	    g_bGenerateNamesList = true;
	    BuildEntitiesList();

        vlPropPutDbl(VD_EXP_X0,nDocIndex,0);
        vlPropPutDbl(VD_EXP_Y0,nDocIndex,0);
        vlPropPutInt(VD_EXP_UNITX,nDocIndex,1);
        vlPropPutInt(VD_EXP_UNITY,nDocIndex,1);
        vlPropPutDbl(VD_EXP_MINSTEP,nDocIndex,m_dMinStepCM);// device
	}
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileImportDXFExecute(TObject *Sender)
{
	int nDocIndex = vlDocGetActive();
    if(nDocIndex < 0)
    {
		AFileNewExecute(NULL);
    }
    g_bGenerateNamesList = false;
    vlExecute(VC_IMPORT_DXF);
	ActivateEntity(-1);
    m_nWorkingAreaRectIndex = vlGetEntity(VL_EI_BYKEY,-2,VL_DRAWING);
    g_bGenerateNamesList = true;
    BuildEntitiesList();

    vlPropPutDbl(VD_EXP_X0,nDocIndex,0);
    vlPropPutDbl(VD_EXP_Y0,nDocIndex,0);
    vlPropPutInt(VD_EXP_UNITX,nDocIndex,1);
    vlPropPutInt(VD_EXP_UNITY,nDocIndex,1);
    vlPropPutDbl(VD_EXP_MINSTEP,nDocIndex,m_dMinStepCM);// device
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileSaveExecute(TObject *Sender)
{
    int DocIndex = vlDocGetActive();
    char cFileName[256];
    AnsiString strFileName;
    vlPropGet(VD_DWG_PATHNAME,DocIndex,cFileName);
    strFileName = cFileName;
    if(strFileName.UpperCase().Pos(".DAT") > 0)
    {
		SaveDATFile(strFileName);
    }
    else
    if(strFileName.UpperCase().Pos(".VEC") > 0)
    {
        vlFileSave(VL_FILE_VEC,strFileName.c_str());
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileSaveAsExecute(TObject *Sender)
{
	if(SaveDialogVEC->Execute())
    {
        vlFileSave(VL_FILE_VEC,SaveDialogVEC->FileName.c_str());
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileExportDXFExecute(TObject *Sender)
{
    vlPropPutInt(VD_ENT_DELETED,m_nWorkingAreaRectIndex,true);
	vlExecute(VC_EXPORT_DXF);
    vlPropPutInt(VD_ENT_DELETED,m_nWorkingAreaRectIndex,false);
/*
	if(SaveDialogExport->Execute())
    {
		SaveDATFile(SaveDialogExport->FileName);
    }
*/
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileCloseExecute(TObject *Sender)
{
    int DocIndex = vlDocGetActive();
	int nDocPos = ListBoxOpenedFiles->Items->IndexOfObject((TObject *)DocIndex);
    if(nDocPos < 0)	return;
	ListBoxOpenedFiles->Items->Delete(nDocPos);
	vlExecute(VC_FILE_CLOSE);
    g_bGenerateNamesList = false;
    BuildEntitiesList();
    ActivateEntity(-1);
    ListBoxOpenedFiles->ItemIndex = 0;
    ListBoxOpenedFilesClick(NULL);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AFileCloseAllExecute(TObject *Sender)
{
    int DocIndex;
	int nDocPos;
	for(int i=0;i<ListBoxOpenedFiles->Items->Count;i++)
    {
		DocIndex = int(ListBoxOpenedFiles->Items->Objects[i]);
    	vlDocSetActive(DocIndex);
		vlExecute(VC_FILE_CLOSE);
    }
	ListBoxOpenedFiles->Clear();
    g_bGenerateNamesList = false;
    BuildEntitiesList();
    ActivateEntity(-1);
    ListBoxOpenedFiles->ItemIndex = 0;
    ListBoxOpenedFilesClick(NULL);

/*
	ListBoxOpenedFiles->Clear();
    vlExecute(VC_FILE_CLOSEALL);
    g_bGenerateNamesList = false;
    BuildEntitiesList();
    ActivateEntity(-1);
    ListBoxOpenedFiles->ItemIndex = 0;
    ListBoxOpenedFilesClick(NULL);
*/
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileExitExecute(TObject *Sender)
{
	Close();	
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AZoomExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AZoomAllExecute(TObject *Sender)
{
	vlExecute(VC_ZOOM_ALL);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AZoomWindowExecute(TObject *Sender)
{
	vlExecute(VC_ZOOM_WIN);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AZoomInExecute(TObject *Sender)
{
	vlExecute(VC_ZOOM_IN);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AZoomOutExecute(TObject *Sender)
{
	vlExecute(VC_ZOOM_OUT);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AZoomPanWindowExecute(TObject *Sender)
{
	vlExecute(VC_ZOOM_PAN);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ZoomToPrevExecute(TObject *Sender)
{
	vlExecute(VC_ZOOM_PREV);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapDlgExecute(TObject *Sender)
{
	vlExecute(VC_SNAP_DLG);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapGridExecute(TObject *Sender)
{
	ASnapGrid->Checked = !ASnapGrid->Checked;
	vlExecute(VC_SNAP_GRID);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapPolarExecute(TObject *Sender)
{
	ASnapPolar->Checked = !ASnapPolar->Checked;
	vlExecute(VC_SNAP_POLAR);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapGripsExecute(TObject *Sender)
{
	ASnapGrips->Checked = !ASnapGrips->Checked;
	vlExecute(VC_SNAP_GRIPS);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapPointExecute(TObject *Sender)
{
	ASnapPoint->Checked = !ASnapPoint->Checked;
	vlExecute(VC_SNAP_POINT);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapNearExecute(TObject *Sender)
{
	ASnapNear->Checked = !ASnapNear->Checked;
	vlExecute(VC_SNAP_NEAR);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapEndExecute(TObject *Sender)
{
	ASnapEnd->Checked = !ASnapEnd->Checked;
	vlExecute(VC_SNAP_END);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapMidExecute(TObject *Sender)
{
	ASnapMid->Checked = !ASnapMid->Checked;
	vlExecute(VC_SNAP_MID);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapCenterExecute(TObject *Sender)
{
	ASnapCenter->Checked = !ASnapCenter->Checked;
	vlExecute(VC_SNAP_CEN);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapPerpendicularExecute(TObject *Sender)
{
	ASnapPerpendicular->Checked = !ASnapPerpendicular->Checked;
	vlExecute(VC_SNAP_PERP);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ASnapTangentExecute(TObject *Sender)
{
	ASnapTangent->Checked = !ASnapTangent->Checked;
	vlExecute(VC_SNAP_TANG);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditEntPropExecute(TObject *Sender)
{
//	vlExecute(VC_EDIT_ENTPROP);
	FormProperties->Show();	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditCopyExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_COPY);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditMoveExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_MOVE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditRotateExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_ROTATE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditScaleExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_SCALE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditMirrorExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_MIRROR);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditEraseExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_ERASE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditUndoExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_UNDO);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditRedoExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_REDO);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditCutCBExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_CBCUT);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditCopyCBExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_CBCOPY);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditPasteCBExecute(TObject *Sender)
{
	vlExecute(VC_EDIT_CBPASTE);
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AEditSetJumpExecute(TObject *Sender)
{
	bool First;
	int iEnt, iLayer;
    int EntityType;
	First = true;
	while(true)
    {
	  	if(First)
        {
		    iEnt = vlGetEntity( VL_EI_FIRST, VL_SELECTION, 0 );
		    First = false;
  		}
        else
        {
	    	iEnt = vlGetEntity(VL_EI_NEXT, 0, 0 );
  		}
  		if(iEnt >= 0)
  		{
            EntityType = vlPropGetInt(VD_ENT_TYPE,iEnt);
            switch(EntityType)
            {
                case VL_ENT_POLYLINE:// Polyline
                case VL_ENT_LINE:// Line
                {
        			vlPropPutInt(VD_ENT_COLOR,iEnt,0x00FF8000);
                    break;
                }
            }
  		}
        else
        {
    		break;  
  		}
	}
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEditSetNormalExecute(TObject *Sender)
{
	bool First;
	int iEnt, iLayer;
    int EntityType;
	First = true;
	while(true)
    {
	  	if(First)
        {
		    iEnt = vlGetEntity( VL_EI_FIRST, VL_SELECTION, 0 );
		    First = false;
  		}
        else
        {
	    	iEnt = vlGetEntity(VL_EI_NEXT, 0, 0 );
  		}
  		if(iEnt >= 0)
  		{
            EntityType = vlPropGetInt(VD_ENT_TYPE,iEnt);
            switch(EntityType)
            {
                case VL_ENT_POLYLINE:// Polyline
                case VL_ENT_LINE:// Line
                {
        			vlPropPutInt(VD_ENT_COLOR,iEnt,clBlack);
                    break;
                }
            }
  		}
        else
        {
    		break;  
  		}
	}
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AHelpExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AHelpContentsExecute(TObject *Sender)
{
	AnsiString strFileName = ChangeFileExt(Application->ExeName,".htm");
	ShellExecute(0,"open",strFileName.c_str(),"","",SW_SHOW);	
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AHelpAboutExecute(TObject *Sender)
{
	FormAbout->ShowModal();	
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::ActivateDesigner()
{
	if(ListBoxOpenedFiles->Items->Count <= 0)	return;
	if(ListBoxOpenedFiles->ItemIndex < 0)
    {
    	ListBoxOpenedFiles->ItemIndex = 0;
    }
	int DocIndex = int(ListBoxOpenedFiles->Items->Objects[ListBoxOpenedFiles->ItemIndex]);
    vlDocSetActive(DocIndex);
    m_nWorkingAreaRectIndex = vlGetEntity(VL_EI_BYKEY,-2,VL_DRAWING);
    char cFileName[256];
    vlPropGet(VD_DWG_PATHNAME,DocIndex,cFileName);
    Caption = m_strAppTitle+" ["+AnsiString(cFileName)+"]";

    g_bGenerateNamesList = true;
    BuildEntitiesList();
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::ListBoxOpenedFilesClick(TObject *Sender)
{
	ActivateDesigner();
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawLineExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_LINE);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawRectangleExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_RECT);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawPolylineExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_POLYLINE);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawArcCSEExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_ARC_CSE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawArcSEMExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_ARC_SEM);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawArcSMEExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_ARC_SME);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawCircleCRExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_CIRC_CR);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawCircleCDExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_CIRC_CD);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawCircle2PExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_CIRC_2P);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawCircle3PExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_CIRC_3P);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawEllipseExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_ELLIPSE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AToolsExecute(TObject *Sender)
{
//
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AToolsSimulatorExecute(TObject *Sender)
{
	FormSimulator->ShowModal();
	ActivateDesigner();	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AToolsNavigatorExecute(TObject *Sender)
{
	vlExecute(VC_TOOL_NAVIGATOR);    
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ATraceExecute(TObject *Sender)
{
//	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ATraceToolExecute(TObject *Sender)
{
	vlExecute(spl_CMD_POLYARC);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::FormClose(TObject *Sender, TCloseAction &Action)
{
    vlExecute(VC_FILE_CLOSEALL);    
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileImportPLTExecute(TObject *Sender)
{
	int nDocIndex = vlDocGetActive();
    if(nDocIndex < 0)
    {
		AFileNewExecute(NULL);
    }
    g_bGenerateNamesList = false;
	vlExecute(VC_IMPORT_HPGL);
	ActivateEntity(-1);
    m_nWorkingAreaRectIndex = vlGetEntity(VL_EI_BYKEY,-2,VL_DRAWING);
    g_bGenerateNamesList = true;
    BuildEntitiesList();

    vlPropPutDbl(VD_EXP_X0,nDocIndex,0);
    vlPropPutDbl(VD_EXP_Y0,nDocIndex,0);
    vlPropPutInt(VD_EXP_UNITX,nDocIndex,1);
    vlPropPutInt(VD_EXP_UNITY,nDocIndex,1);
    vlPropPutDbl(VD_EXP_MINSTEP,nDocIndex,m_dMinStepCM);// device
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::AFileExportPLTExecute(TObject *Sender)
{
	if(!SaveDialogCMD->Execute())	return;
    int nDocIndex;
    nDocIndex = vlDocGetActive();

    vlPropPutDbl(VD_EXP_X0,nDocIndex,0.0);
    vlPropPutDbl(VD_EXP_Y0,nDocIndex,0.0);
    vlPropPutInt(VD_EXP_UNITX,nDocIndex,1.0);
    vlPropPutInt(VD_EXP_UNITY,nDocIndex,1.0);
    vlPropPutDbl(VD_EXP_MINSTEP,nDocIndex,m_dMinStepCM);// device
    
//    vlPropPutInt(VD_ENT_DELETED,m_nWorkingAreaRectIndex,true);
//	vlExecute(VC_EXPORT_HPGL);
	vlFileSave(VL_FILE_CUSTOM,SaveDialogCMD->FileName.c_str());
//    vlPropPutInt(VD_ENT_DELETED,m_nWorkingAreaRectIndex,false);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ShowEntityProperty(int nEntityIndex)
{
	if(FormProperties == NULL)	return;
    FormProperties->Caption = FormProperties->m_strCaption;
    FormProperties->Grid->RowCount = 2;
    FormProperties->Grid->Cells[0][0] = "Property";
    FormProperties->Grid->Cells[1][0] = "Value";
    FormProperties->Grid->Cells[0][1] = "";
    FormProperties->Grid->Cells[1][1] = "";
    if(nEntityIndex < 0)	return;
    int nEntityType;
    nEntityType = vlPropGetInt(VD_ENT_TYPE,nEntityIndex);
    switch(nEntityType)
    {
        case VL_ENT_POINT:// Point
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Point] ";
            break;
        }
        case VL_ENT_LINE:// Line
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Line] ";

            cnc_Point p1,p2;
            p1.x = vlPropGetDbl(VD_LINE_X1,nEntityIndex);
            p1.y = vlPropGetDbl(VD_LINE_Y1,nEntityIndex);
            p2.x = vlPropGetDbl(VD_LINE_X2,nEntityIndex);
            p2.y = vlPropGetDbl(VD_LINE_Y2,nEntityIndex);

    		FormProperties->Grid->RowCount = 1+4;
            FormProperties->Grid->Cells[0][1] = "X1";
            FormProperties->Grid->Cells[1][1] = FormatFloat(c_strFloatMask,p1.x);
            FormProperties->Grid->Cells[0][2] = "Y1";
            FormProperties->Grid->Cells[1][2] = FormatFloat(c_strFloatMask,p1.y);
            FormProperties->Grid->Cells[0][3] = "X2";
            FormProperties->Grid->Cells[1][3] = FormatFloat(c_strFloatMask,p2.x);
            FormProperties->Grid->Cells[0][4] = "Y2";
            FormProperties->Grid->Cells[1][4] = FormatFloat(c_strFloatMask,p2.y);
            break;
        }
        case VL_ENT_POLYLINE:// Polyline
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Polyline] ";

		    int nCount;
		    double x,y;
    		double dParam;
            nCount = vlPropGetInt(VD_POLY_N_VER,nEntityIndex);
    		FormProperties->Grid->RowCount = 1+3*nCount;
            for(int i=0;i<nCount;i++)
            {
                vlPolyVerGet(nEntityIndex,i,&x,&y,&dParam);
	            FormProperties->Grid->Cells[0][3*i+1] = FormatFloat("X0",i+1);
    	        FormProperties->Grid->Cells[1][3*i+1] = FormatFloat(c_strFloatMask,x);
	            FormProperties->Grid->Cells[0][3*i+1+1] = FormatFloat("Y0",i+1);
    	        FormProperties->Grid->Cells[1][3*i+1+1] = FormatFloat(c_strFloatMask,y);
	            FormProperties->Grid->Cells[0][3*i+2+1] = FormatFloat("P0",i+1);
    	        FormProperties->Grid->Cells[1][3*i+2+1] = FormatFloat(c_strFloatMask,dParam);
            }
            break;
        }
        case VL_ENT_CIRCLE:// Circle
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Circle] ";

        	double x,y,r;
            x = vlPropGetDbl(VD_CIRCLE_X,nEntityIndex);
            y = vlPropGetDbl(VD_CIRCLE_Y,nEntityIndex);
            r = vlPropGetDbl(VD_CIRCLE_R,nEntityIndex);

    		FormProperties->Grid->RowCount = 1+3;
            FormProperties->Grid->Cells[0][1] = "X";
            FormProperties->Grid->Cells[1][1] = FormatFloat(c_strFloatMask,x);
            FormProperties->Grid->Cells[0][2] = "Y";
            FormProperties->Grid->Cells[1][2] = FormatFloat(c_strFloatMask,y);
            FormProperties->Grid->Cells[0][3] = "R";
            FormProperties->Grid->Cells[1][3] = FormatFloat(c_strFloatMask,r);
            break;
        }
        case VL_ENT_ARC:// Arc
        case VL_ENT_ARC2:// Arc2
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Arc] ";

        	double x,y,rh,rv,Ang0,AngArc,AngRot;
            x = vlPropGetDbl(VD_ARC_X,nEntityIndex);
            y = vlPropGetDbl(VD_ARC_Y,nEntityIndex);
            rh = vlPropGetDbl(VD_ARC_RH,nEntityIndex);
            rv = vlPropGetDbl(VD_ARC_RV,nEntityIndex);
            Ang0 = vlPropGetDbl(VD_ARC_ANG0,nEntityIndex);
            AngArc = vlPropGetDbl(VD_ARC_ANGARC,nEntityIndex);
            AngRot = vlPropGetDbl(VD_ARC_ANGROT,nEntityIndex);

    		FormProperties->Grid->RowCount = 1+7;
            FormProperties->Grid->Cells[0][1] = "X";
            FormProperties->Grid->Cells[1][1] = FormatFloat(c_strFloatMask,x);
            FormProperties->Grid->Cells[0][2] = "Y";
            FormProperties->Grid->Cells[1][2] = FormatFloat(c_strFloatMask,y);
            FormProperties->Grid->Cells[0][3] = "RH";
            FormProperties->Grid->Cells[1][3] = FormatFloat(c_strFloatMask,rh);
            FormProperties->Grid->Cells[0][4] = "RV";
            FormProperties->Grid->Cells[1][4] = FormatFloat(c_strFloatMask,rv);
            FormProperties->Grid->Cells[0][5] = "Ang0";
            FormProperties->Grid->Cells[1][5] = FormatFloat(c_strFloatMask,Ang0);
            FormProperties->Grid->Cells[0][6] = "Ang-Arc";
            FormProperties->Grid->Cells[1][6] = FormatFloat(c_strFloatMask,AngArc);
            FormProperties->Grid->Cells[0][7] = "Ang-Rot";
            FormProperties->Grid->Cells[1][7] = FormatFloat(c_strFloatMask,AngRot);
            break;
        }
        case VL_ENT_ELLIPSE:// Ellipse
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Ellipse] ";

        	double x,y,rh,rv,AngRot;
            x = vlPropGetDbl(VD_ELLIPSE_X,nEntityIndex);
            y = vlPropGetDbl(VD_ELLIPSE_Y,nEntityIndex);
            rh = vlPropGetDbl(VD_ELLIPSE_RH,nEntityIndex);
            rv = vlPropGetDbl(VD_ELLIPSE_RV,nEntityIndex);
            AngRot = vlPropGetDbl(VD_ELLIPSE_ANGLE,nEntityIndex);

    		FormProperties->Grid->RowCount = 1+5;
            FormProperties->Grid->Cells[0][1] = "X";
            FormProperties->Grid->Cells[1][1] = FormatFloat(c_strFloatMask,x);
            FormProperties->Grid->Cells[0][2] = "Y";
            FormProperties->Grid->Cells[1][2] = FormatFloat(c_strFloatMask,y);
            FormProperties->Grid->Cells[0][3] = "RH";
            FormProperties->Grid->Cells[1][3] = FormatFloat(c_strFloatMask,rh);
            FormProperties->Grid->Cells[0][4] = "RV";
            FormProperties->Grid->Cells[1][4] = FormatFloat(c_strFloatMask,rv);
            FormProperties->Grid->Cells[0][5] = "Ang-Rot";
            FormProperties->Grid->Cells[1][5] = FormatFloat(c_strFloatMask,AngRot);
            break;
        }
        case VL_ENT_TEXT:// Text
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Text] ";
            break;
        }
        case VL_ENT_BITMAP:// Bitmap
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Bitmap] ";
            break;
        }
        case VL_ENT_INSBLOCK:// Block insertion
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Ins-Block] ";
            break;
        }
        case VL_ENT_HATCH:// Hatch
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Hatch] ";
            break;
        }
        case VL_ENT_FLOOD:// Flood
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Flood] ";
            break;
        }
        case VL_ENT_RECT:// Rectangle
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Rect] ";

        	double x,y,w,h,AngRot,r;
            x = vlPropGetDbl(VD_RECT_XCEN,nEntityIndex);
            y = vlPropGetDbl(VD_RECT_YCEN,nEntityIndex);
            w = vlPropGetDbl(VD_RECT_WIDTH,nEntityIndex);
            h = vlPropGetDbl(VD_RECT_HEIGHT,nEntityIndex);
            AngRot = vlPropGetDbl(VD_RECT_ANGLE,nEntityIndex);
            r = vlPropGetDbl(VD_RECT_RADIUS,nEntityIndex);

    		FormProperties->Grid->RowCount = 1+6;
            FormProperties->Grid->Cells[0][1] = "X";
            FormProperties->Grid->Cells[1][1] = FormatFloat(c_strFloatMask,x);
            FormProperties->Grid->Cells[0][2] = "Y";
            FormProperties->Grid->Cells[1][2] = FormatFloat(c_strFloatMask,y);
            FormProperties->Grid->Cells[0][3] = "Width";
            FormProperties->Grid->Cells[1][3] = FormatFloat(c_strFloatMask,w);
            FormProperties->Grid->Cells[0][4] = "Height";
            FormProperties->Grid->Cells[1][4] = FormatFloat(c_strFloatMask,h);
            FormProperties->Grid->Cells[0][5] = "Ang-Rot";
            FormProperties->Grid->Cells[1][5] = FormatFloat(c_strFloatMask,AngRot);
            FormProperties->Grid->Cells[0][6] = "Radius";
            FormProperties->Grid->Cells[1][6] = FormatFloat(c_strFloatMask,r);
            break;
        }
        case VL_ENT_DIMLIN:// DIMLIN
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Dim-Line] ";
            break;
        }
        case VL_ENT_DIMANG:// DIMANG
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Dim-Ang] ";
            break;
        }
        case VL_ENT_DIMRAD:// DIMRAD
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Dim-Rad] ";
            break;
        }
        case VL_ENT_DIMDIAM:// DIMDIAM
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Dim-Diam] ";
            break;
        }
        case VL_ENT_DIMORD:// DIMORD
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Dim-Ord] ";
            break;
        }
        case VL_ENT_DWGINS:// DWGINS
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Dwg-Ins] ";
            break;
        }
        case VL_ENT_CUSTOM:// CUSTOM
        {
    		FormProperties->Caption = FormProperties->m_strCaption+" [Custom] ";
            break;
        }
    }
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::SetEntityProperty(int nRow)
{
	if(ListBoxEntities->ItemIndex < 0)	return;
	int nEntityIndex;
    nEntityIndex = (int)ListBoxEntities->Items->Objects[ListBoxEntities->ItemIndex];
    int nEntityType;
    double d;
    nEntityType = vlPropGetInt(VD_ENT_TYPE,nEntityIndex);
    switch(nEntityType)
    {
        case VL_ENT_POINT:// Point
        {
            break;
        }
        case VL_ENT_LINE:// Line
        {
            switch(nRow)
            {
				case 1:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_LINE_X1,nEntityIndex,d);
                 	break;
                }
				case 2:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_LINE_Y1,nEntityIndex,d);
                 	break;
                }
				case 3:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_LINE_X2,nEntityIndex,d);
                 	break;
                }
				case 4:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_LINE_Y2,nEntityIndex,d);
                 	break;
                }
            }
            break;
        }
        case VL_ENT_POLYLINE:// Polyline
        {
		    int nCount;
		    double x,y;
    		double dParam;
            int nIndex;
            if((nRow-1) % 3 == 0)
				nIndex = (nRow-1)/3;
            else
            if((nRow-1) % 3 == 1)
				nIndex = (nRow-2)/3;
            else
            if((nRow-1) % 3 == 2)
				nIndex = (nRow-3)/3;
            vlPolyVerGet(nEntityIndex,nIndex,&x,&y,&dParam);
            if((nRow-1) % 3 == 0)
            {
            	x = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            }
            else
            if((nRow-1) % 3 == 1)
            {
            	y = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            }
            else
            if((nRow-1) % 3 == 2)
            {
            	dParam = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            }
            vlPolyVerSet(nEntityIndex,nIndex,x,y,dParam);
            break;
        }
        case VL_ENT_CIRCLE:// Circle
        {
            switch(nRow)
            {
				case 1:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_CIRCLE_X,nEntityIndex,d);
                 	break;
                }
				case 2:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_CIRCLE_Y,nEntityIndex,d);
                 	break;
                }
				case 3:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_CIRCLE_R,nEntityIndex,d);
                 	break;
                }
            }
            break;
        }
        case VL_ENT_ARC:// Arc
        case VL_ENT_ARC2:// Arc2
        {
            switch(nRow)
            {
				case 1:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_ARC_X,nEntityIndex,d);
                 	break;
                }
				case 2:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_ARC_Y,nEntityIndex,d);
                 	break;
                }
				case 3:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ARC_RH,nEntityIndex,d);
                 	break;
                }
				case 4:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ARC_RV,nEntityIndex,d);
                 	break;
                }
				case 5:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ARC_ANG0,nEntityIndex,d);
                 	break;
                }
				case 6:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ARC_ANGARC,nEntityIndex,d);
                 	break;
                }
				case 7:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ARC_ANGROT,nEntityIndex,d);
                 	break;
                }
            }
            break;
        }
        case VL_ENT_ELLIPSE:// Ellipse
        {
            switch(nRow)
            {
				case 1:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_ELLIPSE_X,nEntityIndex,d);
                 	break;
                }
				case 2:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_ELLIPSE_Y,nEntityIndex,d);
                 	break;
                }
				case 3:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ELLIPSE_RH,nEntityIndex,d);
                 	break;
                }
				case 4:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ELLIPSE_RV,nEntityIndex,d);
                 	break;
                }
				case 5:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_ELLIPSE_ANGLE,nEntityIndex,d);
                 	break;
                }
            }
            break;
        }
        case VL_ENT_TEXT:// Text
        {
            break;
        }
        case VL_ENT_BITMAP:// Bitmap
        {
            break;
        }
        case VL_ENT_INSBLOCK:// Block insertion
        {
            break;
        }
        case VL_ENT_HATCH:// Hatch
        {
            break;
        }
        case VL_ENT_FLOOD:// Flood
        {
            break;
        }
        case VL_ENT_RECT:// Rectangle
        {
            switch(nRow)
            {
				case 1:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_RECT_XCEN,nEntityIndex,d);
                 	break;
                }
				case 2:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
            		vlPropPutDbl(VD_RECT_YCEN,nEntityIndex,d);
                 	break;
                }
				case 3:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_RECT_WIDTH,nEntityIndex,d);
                 	break;
                }
				case 4:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_RECT_HEIGHT,nEntityIndex,d);
                 	break;
                }
				case 5:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_RECT_ANGLE,nEntityIndex,d);
                 	break;
                }
				case 6:
                {
				    d = StrToFloat(FormProperties->Grid->Cells[1][nRow]);
		            vlPropPutDbl(VD_RECT_RADIUS,nEntityIndex,d);
                 	break;
                }
            }
            break;
        }
        case VL_ENT_DIMLIN:// DIMLIN
        {
            break;
        }
        case VL_ENT_DIMANG:// DIMANG
        {
            break;
        }
        case VL_ENT_DIMRAD:// DIMRAD
        {
            break;
        }
        case VL_ENT_DIMDIAM:// DIMDIAM
        {
            break;
        }
        case VL_ENT_DIMORD:// DIMORD
        {
            break;
        }
        case VL_ENT_DWGINS:// DWGINS
        {
            break;
        }
        case VL_ENT_CUSTOM:// CUSTOM
        {
            break;
        }
    }
    vlRedraw();
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ActivateEntity(int nEntityIndex)
{
	if(nEntityIndex >= 0)
    {
        CSpinEditDepth->Value = vlPropGetInt(VD_ENT_KEY,nEntityIndex);
        CSpinEditDepth->Enabled = true;
        for(int i=0;i<10;i++)
        {
            if(g_pTools[i].nColor == vlPropGetInt(VD_ENT_COLOR,nEntityIndex))
            {
                ComboBoxTools->ItemIndex = i;
                ComboBoxTools->Enabled = true;
                ComboBoxToolsChange(NULL);
                break;
            }
        }
    }
    else
    {
          ListBoxEntities->ItemIndex = -1;
          CSpinEditDepth->Value = 0;
          CSpinEditDepth->Enabled = false;
          ComboBoxTools->Enabled = false;
    }
    ShowEntityProperty(nEntityIndex);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ListBoxEntitiesClick(TObject *Sender)
{
	if(ListBoxEntities->ItemIndex < 0)	return;
	int nEntityIndex;
    nEntityIndex = (int)ListBoxEntities->Items->Objects[ListBoxEntities->ItemIndex];
    ActivateEntity(nEntityIndex);
	vlSelect(false,-1);
	vlSelect(true,nEntityIndex);
	vlRedraw();
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AToolsOptionsExecute(TObject *Sender)
{
	// Language
    switch(m_nLanguageID)
    {
        case 0:
        {
			FormOptions->ToolButton2->Click();
            FormOptions->ToolButton1->Down = false;
            FormOptions->ToolButton2->Down = true;
            FormOptions->ToolButton3->Down = false;
            break;
        }
        case 1:
        {
			FormOptions->ToolButton1->Click();
            FormOptions->ToolButton1->Down = true;
            FormOptions->ToolButton2->Down = false;
            FormOptions->ToolButton3->Down = false;
            break;
        }
        case 2:
        {
			FormOptions->ToolButton3->Click();
            FormOptions->ToolButton1->Down = false;
            FormOptions->ToolButton2->Down = false;
            FormOptions->ToolButton3->Down = true;
            break;
        }
    }

    // Grid
    FormOptions->EditGridOX->Text = FormatFloat("0.00",vlPropGetDbl(VD_GRID_X0,-1));
    FormOptions->EditGridOY->Text = FormatFloat("0.00",vlPropGetDbl(VD_GRID_Y0,-1));
    FormOptions->EditGridSmallStepX->Text = FormatFloat("0.00",vlPropGetDbl(VD_GRID_DX,-1));
    FormOptions->EditGridSmallStepY->Text = FormatFloat("0.00",vlPropGetDbl(VD_GRID_DY,-1));
    FormOptions->EditGridLargeStepX->Text = IntToStr(vlPropGetInt(VD_GRID_BSTEPX,-1));
    FormOptions->EditGridLargeStepY->Text = IntToStr(vlPropGetInt(VD_GRID_BSTEPY,-1));
    FormOptions->CheckBoxGridSnap->Checked = (vlPropGetInt(VD_DWG_SNAP,-1) & VL_SNAP_GRID);
    FormOptions->CheckBoxGridShow->Checked = vlPropGetInt(VD_DWG_SHOWGRID,-1);
    FormOptions->PanelGridSmallColor->Color = (TColor)vlPropGetInt(VD_GRID_COLOR,-1);
    FormOptions->PanelGridLargeColor->Color = (TColor)vlPropGetInt(VD_GRID_BCOLOR,-1);

	if(FormOptions->ShowModal() != mrOk)	return;

    // Grid
    m_dGridOX = StrToFloat(FormOptions->EditGridOX->Text);
    m_dGridOY = StrToFloat(FormOptions->EditGridOY->Text);
    m_dGridSmallStepX = StrToFloat(FormOptions->EditGridSmallStepX->Text);
    m_dGridSmallStepY = StrToFloat(FormOptions->EditGridSmallStepY->Text);
	m_nGridLargeStepX = StrToInt(FormOptions->EditGridLargeStepX->Text);
	m_nGridLargeStepY = StrToInt(FormOptions->EditGridLargeStepY->Text);
	m_bGridSnap = FormOptions->CheckBoxGridSnap->Checked;
    m_bGridShow = FormOptions->CheckBoxGridShow->Checked;
    m_nGridSmallColor = FormOptions->PanelGridSmallColor->Color;
	m_nGridLargeColor = FormOptions->PanelGridLargeColor->Color;

    vlPropPutDbl(VD_GRID_X0,-1,m_dGridOX);
    vlPropPutDbl(VD_GRID_Y0,-1,m_dGridOY);
    vlPropPutDbl(VD_GRID_DX,-1,m_dGridSmallStepX);
    vlPropPutDbl(VD_GRID_DY,-1,m_dGridSmallStepY);
    vlPropPutInt(VD_GRID_BSTEPX,-1,m_nGridLargeStepX);
    vlPropPutInt(VD_GRID_BSTEPY,-1,m_nGridLargeStepY);
    nSnapData = vlPropGetInt(VD_DWG_SNAP,-1);
    if(m_bGridSnap && (!(nSnapData & VL_SNAP_GRID))) 	vlExecute(VC_SNAP_GRID);
    else
    if((!m_bGridSnap) && (nSnapData & VL_SNAP_GRID))	vlExecute(VC_SNAP_GRID);
    vlPropPutInt(VD_DWG_SHOWGRID,-1,m_bGridShow);
    vlPropPutInt(VD_GRID_COLOR,-1,m_nGridSmallColor);
    vlPropPutInt(VD_GRID_BCOLOR,-1,m_nGridLargeColor);

    if(m_nLanguageID != FormOptions->PanelLanguage->Tag)
    {
	    m_nLanguageID = FormOptions->PanelLanguage->Tag;
	    MessageDlg(c_strYouMustRestartTheProgramToViewTheChanges,mtInformation,TMsgDlgButtons()<<mbOK,0);
    }
    SaveSettings();
    vlRedraw();
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AFileImportExecute(TObject *Sender)
{
//	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AFileExportExecute(TObject *Sender)
{
//	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawSplineExecute(TObject *Sender)
{
	vlExecute(VC_DRAW_SPLINE);    
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawArcExecute(TObject *Sender)
{
//	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawCircleExecute(TObject *Sender)
{
//	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::APluginExecute(TObject *Sender)
{
//	
}
//---------------------------------------------------------------------------
void __fastcall TFormMain::CSpinEditDepthChange(TObject *Sender)
{
	if(ListBoxEntities->ItemIndex < 0)	return;
	int nEntityIndex;
    nEntityIndex = (int)ListBoxEntities->Items->Objects[ListBoxEntities->ItemIndex];
	vlPropPutInt(VD_ENT_KEY,nEntityIndex,CSpinEditDepth->Value);
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEntityUpExecute(TObject *Sender)
{
	if(ListBoxEntities->ItemIndex < 0)	return;
    if(ListBoxEntities->ItemIndex < 1)	return;
	int nIndex,nUpIndex;
	int nEntityIndex,nUpEntityIndex;
    nIndex = ListBoxEntities->ItemIndex;
    nUpIndex = ListBoxEntities->ItemIndex-1;
    nEntityIndex = (int)ListBoxEntities->Items->Objects[nIndex];
    nUpEntityIndex = (int)ListBoxEntities->Items->Objects[nUpIndex];
	vlEntSwap(nEntityIndex,nUpEntityIndex);
    vlRedraw();
    ListBoxEntities->Items->Exchange(nIndex,nUpIndex);
    ListBoxEntities->Items->Objects[nIndex] = (TObject *)nEntityIndex;
    ListBoxEntities->Items->Objects[nUpIndex] = (TObject *)nUpEntityIndex;
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::AEntityDownExecute(TObject *Sender)
{
	if(ListBoxEntities->ItemIndex < 0)	return;
    if(ListBoxEntities->ItemIndex >= ListBoxEntities->Items->Count-1)	return;
	int nIndex,nDownIndex;
	int nEntityIndex,nDownEntityIndex;
    nIndex = ListBoxEntities->ItemIndex;
    nDownIndex = ListBoxEntities->ItemIndex+1;
    nEntityIndex = (int)ListBoxEntities->Items->Objects[nIndex];
    nDownEntityIndex = (int)ListBoxEntities->Items->Objects[nDownIndex];
	vlEntSwap(nEntityIndex,nDownEntityIndex);
    vlRedraw();
    ListBoxEntities->Items->Exchange(nIndex,nDownIndex);
    ListBoxEntities->Items->Objects[nIndex] = (TObject *)nEntityIndex;
    ListBoxEntities->Items->Objects[nDownIndex] = (TObject *)nDownEntityIndex;
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ComboBoxToolsChange(TObject *Sender)
{
	if(ComboBoxTools->ItemIndex < 0)	return;
	PanelTool->Color = (TColor)g_pTools[ComboBoxTools->ItemIndex].nColor;
    PanelToolName->Caption = g_pTools[ComboBoxTools->ItemIndex].strName;
	if(ListBoxEntities->ItemIndex < 0)	return;
	int nEntityIndex;
    nEntityIndex = (int)ListBoxEntities->Items->Objects[ListBoxEntities->ItemIndex];
	vlPropPutInt(VD_ENT_COLOR,nEntityIndex,g_pTools[ComboBoxTools->ItemIndex].nColor);
    vlRedraw();
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawSpiralExecute(TObject *Sender)
{
	vlExecute(spl_CMD_SPIRAL);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawSpiral2Execute(TObject *Sender)
{
	vlExecute(spl_CMD_SPIRAL_2);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ADrawSquareExecute(TObject *Sender)
{
	vlExecute(spl_CMD_SQUARE);	
}
//---------------------------------------------------------------------------

void __fastcall TFormMain::ApplicationEventsHint(TObject *Sender)
{
	StatusBar->SimpleText = Application->Hint;	
}
//---------------------------------------------------------------------------

